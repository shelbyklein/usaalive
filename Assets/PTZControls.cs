//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PTZControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PTZControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PTZControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PTZControls"",
    ""maps"": [
        {
            ""name"": ""CameraSelection"",
            ""id"": ""757d50b8-a9ff-41d2-a17f-17fb4948a421"",
            ""actions"": [
                {
                    ""name"": ""SelectCamera1"",
                    ""type"": ""Button"",
                    ""id"": ""054c4ba4-3e2e-484b-a30c-93b488e17c5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectCamera2"",
                    ""type"": ""Button"",
                    ""id"": ""9d4e5189-407a-48e5-82b1-8e831dcbe655"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectCamera3"",
                    ""type"": ""Button"",
                    ""id"": ""9490f8a3-110f-4e85-b41b-3e0f553ad8a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectCamera4"",
                    ""type"": ""Button"",
                    ""id"": ""35329562-10f0-485c-a3d9-54a65a194e6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectCamera5"",
                    ""type"": ""Button"",
                    ""id"": ""8928fb96-d23b-425f-9fd9-f5ffdbb85373"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectCamera6"",
                    ""type"": ""Button"",
                    ""id"": ""a578d94b-e20e-4bda-a413-631e1032d97e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63497d1e-7340-4d15-aa5e-4d5ec26f980c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectCamera1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5b3dc23-ea3f-4688-a6c1-6f612d99551a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectCamera2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec4d72f4-b522-4b15-b715-65c322e20fd9"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectCamera3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cf5d6eb-69d3-4f02-b145-f17a5ec5af46"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectCamera4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""714d5f1b-5a03-4ce9-8c90-df969e71de0d"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectCamera5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f86801ea-fd35-4585-b2f3-35205cd0726b"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectCamera6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ZoomControl"",
            ""id"": ""56701234-5670-5670-5670-f01234567890"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""67012345-6701-6701-6701-012345678901"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Q/E Keys"",
                    ""id"": ""70123456-7012-7012-7012-123456789012"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a4f9a264-64a6-419f-9f36-a8db89421ba8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e0de5439-d993-485f-875a-aa793ca8dcad"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad Triggers"",
                    ""id"": ""62ffa0b1-c07d-4f78-9ffe-7c7cc319f5d4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1728e0bc-4281-4fa5-b3d8-c000ad1488e1"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""45678901-4567-4567-4567-678901234567"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""FocusControl"",
            ""id"": ""56789012-5678-5678-5678-789012345678"",
            ""actions"": [
                {
                    ""name"": ""Focus"",
                    ""type"": ""Value"",
                    ""id"": ""67890123-6789-6789-6789-890123456789"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AutoFocus"",
                    ""type"": ""Button"",
                    ""id"": ""78901234-7890-7890-7890-901234567890"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""F/V Keys"",
                    ""id"": ""89012345-8901-8901-8901-012345678901"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""90123456-9012-9012-9012-123456789012"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""01234567-0123-0123-0123-234567890123"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""12345678-1234-1234-1234-345678901234"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23456789-2345-2345-2345-456789012345"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34567890-3456-3456-3456-567890123456"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PresetControl"",
            ""id"": ""45678901-4567-4567-4567-678901234567"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""PTZMovement"",
            ""id"": ""3b3f9c07-5c65-4444-8b37-aaae1c8c105c"",
            ""actions"": [
                {
                    ""name"": ""CycleCameraNext"",
                    ""type"": ""Button"",
                    ""id"": ""081049ba-6272-4dc1-afbb-0fcfb4d60c21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleCameraPrevious"",
                    ""type"": ""Button"",
                    ""id"": ""3b870b5f-a71a-41f5-a49b-6707dafbe4d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc472fb2-0e55-4917-9595-0a8ad438502e"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CycleCameraNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e01b9e0f-db29-40e9-ac34-3dc8947dccf8"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CycleCameraPrevious"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CameraSelection
        m_CameraSelection = asset.FindActionMap("CameraSelection", throwIfNotFound: true);
        m_CameraSelection_SelectCamera1 = m_CameraSelection.FindAction("SelectCamera1", throwIfNotFound: true);
        m_CameraSelection_SelectCamera2 = m_CameraSelection.FindAction("SelectCamera2", throwIfNotFound: true);
        m_CameraSelection_SelectCamera3 = m_CameraSelection.FindAction("SelectCamera3", throwIfNotFound: true);
        m_CameraSelection_SelectCamera4 = m_CameraSelection.FindAction("SelectCamera4", throwIfNotFound: true);
        m_CameraSelection_SelectCamera5 = m_CameraSelection.FindAction("SelectCamera5", throwIfNotFound: true);
        m_CameraSelection_SelectCamera6 = m_CameraSelection.FindAction("SelectCamera6", throwIfNotFound: true);
        // ZoomControl
        m_ZoomControl = asset.FindActionMap("ZoomControl", throwIfNotFound: true);
        m_ZoomControl_Zoom = m_ZoomControl.FindAction("Zoom", throwIfNotFound: true);
        // FocusControl
        m_FocusControl = asset.FindActionMap("FocusControl", throwIfNotFound: true);
        m_FocusControl_Focus = m_FocusControl.FindAction("Focus", throwIfNotFound: true);
        m_FocusControl_AutoFocus = m_FocusControl.FindAction("AutoFocus", throwIfNotFound: true);
        // PresetControl
        m_PresetControl = asset.FindActionMap("PresetControl", throwIfNotFound: true);
        // PTZMovement
        m_PTZMovement = asset.FindActionMap("PTZMovement", throwIfNotFound: true);
        m_PTZMovement_CycleCameraNext = m_PTZMovement.FindAction("CycleCameraNext", throwIfNotFound: true);
        m_PTZMovement_CycleCameraPrevious = m_PTZMovement.FindAction("CycleCameraPrevious", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraSelection
    private readonly InputActionMap m_CameraSelection;
    private List<ICameraSelectionActions> m_CameraSelectionActionsCallbackInterfaces = new List<ICameraSelectionActions>();
    private readonly InputAction m_CameraSelection_SelectCamera1;
    private readonly InputAction m_CameraSelection_SelectCamera2;
    private readonly InputAction m_CameraSelection_SelectCamera3;
    private readonly InputAction m_CameraSelection_SelectCamera4;
    private readonly InputAction m_CameraSelection_SelectCamera5;
    private readonly InputAction m_CameraSelection_SelectCamera6;
    public struct CameraSelectionActions
    {
        private @PTZControls m_Wrapper;
        public CameraSelectionActions(@PTZControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectCamera1 => m_Wrapper.m_CameraSelection_SelectCamera1;
        public InputAction @SelectCamera2 => m_Wrapper.m_CameraSelection_SelectCamera2;
        public InputAction @SelectCamera3 => m_Wrapper.m_CameraSelection_SelectCamera3;
        public InputAction @SelectCamera4 => m_Wrapper.m_CameraSelection_SelectCamera4;
        public InputAction @SelectCamera5 => m_Wrapper.m_CameraSelection_SelectCamera5;
        public InputAction @SelectCamera6 => m_Wrapper.m_CameraSelection_SelectCamera6;
        public InputActionMap Get() { return m_Wrapper.m_CameraSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraSelectionActions set) { return set.Get(); }
        public void AddCallbacks(ICameraSelectionActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraSelectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraSelectionActionsCallbackInterfaces.Add(instance);
            @SelectCamera1.started += instance.OnSelectCamera1;
            @SelectCamera1.performed += instance.OnSelectCamera1;
            @SelectCamera1.canceled += instance.OnSelectCamera1;
            @SelectCamera2.started += instance.OnSelectCamera2;
            @SelectCamera2.performed += instance.OnSelectCamera2;
            @SelectCamera2.canceled += instance.OnSelectCamera2;
            @SelectCamera3.started += instance.OnSelectCamera3;
            @SelectCamera3.performed += instance.OnSelectCamera3;
            @SelectCamera3.canceled += instance.OnSelectCamera3;
            @SelectCamera4.started += instance.OnSelectCamera4;
            @SelectCamera4.performed += instance.OnSelectCamera4;
            @SelectCamera4.canceled += instance.OnSelectCamera4;
            @SelectCamera5.started += instance.OnSelectCamera5;
            @SelectCamera5.performed += instance.OnSelectCamera5;
            @SelectCamera5.canceled += instance.OnSelectCamera5;
            @SelectCamera6.started += instance.OnSelectCamera6;
            @SelectCamera6.performed += instance.OnSelectCamera6;
            @SelectCamera6.canceled += instance.OnSelectCamera6;
        }

        private void UnregisterCallbacks(ICameraSelectionActions instance)
        {
            @SelectCamera1.started -= instance.OnSelectCamera1;
            @SelectCamera1.performed -= instance.OnSelectCamera1;
            @SelectCamera1.canceled -= instance.OnSelectCamera1;
            @SelectCamera2.started -= instance.OnSelectCamera2;
            @SelectCamera2.performed -= instance.OnSelectCamera2;
            @SelectCamera2.canceled -= instance.OnSelectCamera2;
            @SelectCamera3.started -= instance.OnSelectCamera3;
            @SelectCamera3.performed -= instance.OnSelectCamera3;
            @SelectCamera3.canceled -= instance.OnSelectCamera3;
            @SelectCamera4.started -= instance.OnSelectCamera4;
            @SelectCamera4.performed -= instance.OnSelectCamera4;
            @SelectCamera4.canceled -= instance.OnSelectCamera4;
            @SelectCamera5.started -= instance.OnSelectCamera5;
            @SelectCamera5.performed -= instance.OnSelectCamera5;
            @SelectCamera5.canceled -= instance.OnSelectCamera5;
            @SelectCamera6.started -= instance.OnSelectCamera6;
            @SelectCamera6.performed -= instance.OnSelectCamera6;
            @SelectCamera6.canceled -= instance.OnSelectCamera6;
        }

        public void RemoveCallbacks(ICameraSelectionActions instance)
        {
            if (m_Wrapper.m_CameraSelectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraSelectionActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraSelectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraSelectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraSelectionActions @CameraSelection => new CameraSelectionActions(this);

    // ZoomControl
    private readonly InputActionMap m_ZoomControl;
    private List<IZoomControlActions> m_ZoomControlActionsCallbackInterfaces = new List<IZoomControlActions>();
    private readonly InputAction m_ZoomControl_Zoom;
    public struct ZoomControlActions
    {
        private @PTZControls m_Wrapper;
        public ZoomControlActions(@PTZControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_ZoomControl_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_ZoomControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ZoomControlActions set) { return set.Get(); }
        public void AddCallbacks(IZoomControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ZoomControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ZoomControlActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
        }

        private void UnregisterCallbacks(IZoomControlActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
        }

        public void RemoveCallbacks(IZoomControlActions instance)
        {
            if (m_Wrapper.m_ZoomControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IZoomControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ZoomControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ZoomControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ZoomControlActions @ZoomControl => new ZoomControlActions(this);

    // FocusControl
    private readonly InputActionMap m_FocusControl;
    private List<IFocusControlActions> m_FocusControlActionsCallbackInterfaces = new List<IFocusControlActions>();
    private readonly InputAction m_FocusControl_Focus;
    private readonly InputAction m_FocusControl_AutoFocus;
    public struct FocusControlActions
    {
        private @PTZControls m_Wrapper;
        public FocusControlActions(@PTZControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Focus => m_Wrapper.m_FocusControl_Focus;
        public InputAction @AutoFocus => m_Wrapper.m_FocusControl_AutoFocus;
        public InputActionMap Get() { return m_Wrapper.m_FocusControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FocusControlActions set) { return set.Get(); }
        public void AddCallbacks(IFocusControlActions instance)
        {
            if (instance == null || m_Wrapper.m_FocusControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FocusControlActionsCallbackInterfaces.Add(instance);
            @Focus.started += instance.OnFocus;
            @Focus.performed += instance.OnFocus;
            @Focus.canceled += instance.OnFocus;
            @AutoFocus.started += instance.OnAutoFocus;
            @AutoFocus.performed += instance.OnAutoFocus;
            @AutoFocus.canceled += instance.OnAutoFocus;
        }

        private void UnregisterCallbacks(IFocusControlActions instance)
        {
            @Focus.started -= instance.OnFocus;
            @Focus.performed -= instance.OnFocus;
            @Focus.canceled -= instance.OnFocus;
            @AutoFocus.started -= instance.OnAutoFocus;
            @AutoFocus.performed -= instance.OnAutoFocus;
            @AutoFocus.canceled -= instance.OnAutoFocus;
        }

        public void RemoveCallbacks(IFocusControlActions instance)
        {
            if (m_Wrapper.m_FocusControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFocusControlActions instance)
        {
            foreach (var item in m_Wrapper.m_FocusControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FocusControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FocusControlActions @FocusControl => new FocusControlActions(this);

    // PresetControl
    private readonly InputActionMap m_PresetControl;
    private List<IPresetControlActions> m_PresetControlActionsCallbackInterfaces = new List<IPresetControlActions>();
    public struct PresetControlActions
    {
        private @PTZControls m_Wrapper;
        public PresetControlActions(@PTZControls wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_PresetControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PresetControlActions set) { return set.Get(); }
        public void AddCallbacks(IPresetControlActions instance)
        {
            if (instance == null || m_Wrapper.m_PresetControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PresetControlActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IPresetControlActions instance)
        {
        }

        public void RemoveCallbacks(IPresetControlActions instance)
        {
            if (m_Wrapper.m_PresetControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPresetControlActions instance)
        {
            foreach (var item in m_Wrapper.m_PresetControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PresetControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PresetControlActions @PresetControl => new PresetControlActions(this);

    // PTZMovement
    private readonly InputActionMap m_PTZMovement;
    private List<IPTZMovementActions> m_PTZMovementActionsCallbackInterfaces = new List<IPTZMovementActions>();
    private readonly InputAction m_PTZMovement_CycleCameraNext;
    private readonly InputAction m_PTZMovement_CycleCameraPrevious;
    public struct PTZMovementActions
    {
        private @PTZControls m_Wrapper;
        public PTZMovementActions(@PTZControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CycleCameraNext => m_Wrapper.m_PTZMovement_CycleCameraNext;
        public InputAction @CycleCameraPrevious => m_Wrapper.m_PTZMovement_CycleCameraPrevious;
        public InputActionMap Get() { return m_Wrapper.m_PTZMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PTZMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPTZMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PTZMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PTZMovementActionsCallbackInterfaces.Add(instance);
            @CycleCameraNext.started += instance.OnCycleCameraNext;
            @CycleCameraNext.performed += instance.OnCycleCameraNext;
            @CycleCameraNext.canceled += instance.OnCycleCameraNext;
            @CycleCameraPrevious.started += instance.OnCycleCameraPrevious;
            @CycleCameraPrevious.performed += instance.OnCycleCameraPrevious;
            @CycleCameraPrevious.canceled += instance.OnCycleCameraPrevious;
        }

        private void UnregisterCallbacks(IPTZMovementActions instance)
        {
            @CycleCameraNext.started -= instance.OnCycleCameraNext;
            @CycleCameraNext.performed -= instance.OnCycleCameraNext;
            @CycleCameraNext.canceled -= instance.OnCycleCameraNext;
            @CycleCameraPrevious.started -= instance.OnCycleCameraPrevious;
            @CycleCameraPrevious.performed -= instance.OnCycleCameraPrevious;
            @CycleCameraPrevious.canceled -= instance.OnCycleCameraPrevious;
        }

        public void RemoveCallbacks(IPTZMovementActions instance)
        {
            if (m_Wrapper.m_PTZMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPTZMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PTZMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PTZMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PTZMovementActions @PTZMovement => new PTZMovementActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ICameraSelectionActions
    {
        void OnSelectCamera1(InputAction.CallbackContext context);
        void OnSelectCamera2(InputAction.CallbackContext context);
        void OnSelectCamera3(InputAction.CallbackContext context);
        void OnSelectCamera4(InputAction.CallbackContext context);
        void OnSelectCamera5(InputAction.CallbackContext context);
        void OnSelectCamera6(InputAction.CallbackContext context);
    }
    public interface IZoomControlActions
    {
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IFocusControlActions
    {
        void OnFocus(InputAction.CallbackContext context);
        void OnAutoFocus(InputAction.CallbackContext context);
    }
    public interface IPresetControlActions
    {
    }
    public interface IPTZMovementActions
    {
        void OnCycleCameraNext(InputAction.CallbackContext context);
        void OnCycleCameraPrevious(InputAction.CallbackContext context);
    }
}
